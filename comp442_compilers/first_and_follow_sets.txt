First Set
first(prog) : { class, program }
first(type) : { float, int, id }
first(progBody) : { program }
first(termRest) : { EPSILON, /, *, and }
first(classDecl) : { class }
first(factorRestRest) : { EPSILON, [, . }
first(classDeclList) : { class, EPSILON }
first(termAEIntRest) : { EPSILON, /, *, and }
first(variable) : { id }
first(funcDef) : { float, int, id }
first(typeNoId) : { float, int }
first(elseBlock) : { else, EPSILON }
first(funcDefRest) : { ( }
first(funcBody) : { { }
first(funcDefList) : { EPSILON, float, int, id }
first(varDecl) : { float, int, id }
first(termAEInt) : { -, (, id, integer, +, not }
first(varDeclNoId) : { float, int }
first(assignOp) : { = }
first(arithExpr) : { -, (, id, +, num, not }
first(statementList) : { EPSILON, get, if, ., [, =, for, put, id, return }
first(varDeclRest) : { [, ; }
first(factorAEInt) : { -, (, id, integer, +, not }
first(varFuncDefList) : { EPSILON, float, int, id }
first(dotidIndiceList) : { ., [, EPSILON }
first(varFuncDefListRest) : { (, [, ; }
first(varStatementList) : { put, id, get, float, if, EPSILON, for, int, return }
first(varStatementListRest) : { id, [, ., = }
first(relExpr) : { -, (, id, +, num, not }
first(statement) : { =, ., [, for, if, get, id, put, return }
first(arithExprAEInt) : { -, (, id, integer, +, not }
first(noIdStartStatement) : { for, if, get, put, return }
first(arraySizeList) : { [, EPSILON }
first(assignStat) : { id, [, ., = }
first(assignStatRest) : { [, ., = }
first(assignStatRestRest) : { ., = }
first(addOp) : { +, -, or }
first(statBlock) : { {, EPSILON, get, if, [, ., =, for, put, id, return }
first(sign) : { +, - }
first(expr) : { -, (, id, +, num, not }
first(dotidnest) : { . }
first(exprRest) : { EPSILON, <>, >, ==, <, <=, >= }
first(aParamsTail) : { , }
first(fParamsTail) : { , }
first(arithExprRest) : { EPSILON, +, -, or }
first(relOp) : { ==, <>, >, <, <=, >= }
first(term) : { -, (, id, +, num, not }
first(multOp) : { /, *, and }
first(indiceList) : { [, EPSILON }
first(factor) : { -, (, id, +, num, not }
first(arraySize) : { [ }
first(factorRest) : { (, EPSILON, ., [ }
first(arithExprAEIntRest) : { EPSILON, +, -, or }
first(aParams) : { EPSILON, -, (, id, +, num, not }
first(fParams) : { float, EPSILON, int, id }
first(dotidIndice) : { ., [ }
first(indice) : { [ }
first(aParamsTailList) : { ,, EPSILON }
first(fParamsTailList) : { ,, EPSILON }

Follow Set
follow(prog) : { $ }
follow(type) : { id }
follow(progBody) : { $ }
follow(termRest) : { ==, +, <, -, <=, ), or, >, <>, >=, ,, ; }
follow(classDecl) : { class, program }
follow(factorRestRest) : { <>, >, *, /, <, -, and, ], ==, +, or, <=, ), >=, ,, ; }
follow(classDeclList) : { program }
follow(termAEIntRest) : { ], +, -, ), or }
follow(variable) : { ), = }
follow(funcDef) : { float, $, int, id }
follow(typeNoId) : { id }
follow(elseBlock) : { ; }
follow(funcDefRest) : { float, $, int, }, id }
follow(funcBody) : { ; }
follow(funcDefList) : { $ }
follow(varDecl) : {  }
follow(termAEInt) : { ], +, -, ), or }
follow(varDeclNoId) : { id, }, put, if, get, float, int, for, return }
follow(assignOp) : { -, (, id, +, num, not }
follow(arithExpr) : { >, <>, ==, <, <=, ), >=, ,, ; }
follow(statementList) : { } }
follow(varDeclRest) : { get, float, if, for, int, put, }, id, return }
follow(factorAEInt) : { /, *, -, and, ], +, ), or }
follow(varFuncDefList) : { } }
follow(dotidIndiceList) : { ), = }
follow(varFuncDefListRest) : { float, int, }, id }
follow(varStatementList) : { } }
follow(varStatementListRest) : { id, }, put, if, get, float, int, for, return }
follow(relExpr) : { ; }
follow(statement) : { get, if, ., [, =, for, put, }, id, return, ;, else }
follow(arithExprAEInt) : { ), ] }
follow(noIdStartStatement) : { id, }, put, if, get, float, int, =, [, ., for, return, ;, else }
follow(arraySizeList) : { ,, ;, ) }
follow(assignStat) : { ;, ) }
follow(assignStatRest) : { ;, ) }
follow(assignStatRestRest) : { ;, ) }
follow(addOp) : { -, (, id, +, num, not, integer }
follow(statBlock) : { ;, else }
follow(sign) : { -, (, id, +, num, not, integer }
follow(expr) : { ;, ,, ) }
follow(dotidnest) : { <, (, -, and, ), <=, or, [, ., =, /, *, >, <>, ], ==, +, >=, ;, , }
follow(exprRest) : { ;, ,, ) }
follow(aParamsTail) : { ,, ) }
follow(fParamsTail) : { ,, ) }
follow(arithExprRest) : { <>, >, ==, <, ), <=, >=, ;, , }
follow(relOp) : { -, (, id, +, num, not }
follow(term) : { +, ==, -, <, or, ), <=, <>, >, >=, ,, ; }
follow(multOp) : { -, (, id, +, num, not, integer }
follow(indiceList) : { ., = }
follow(factor) : { <>, >, *, /, <, -, and, ==, +, or, <=, ), >=, ,, ; }
follow(arraySize) : { [, ), ;, , }
follow(factorRest) : { /, *, >, <>, and, -, <, +, ==, ], or, <=, ), >=, ,, ; }
follow(arithExprAEIntRest) : { ), ] }
follow(aParams) : { ) }
follow(fParams) : { ) }
follow(dotidIndice) : { =, ), ., [ }
follow(indice) : { or, <=, ), ., [, =, <>, >, *, /, <, -, and, ], +, ==, >=, ,, ; }
follow(aParamsTailList) : { ) }
follow(fParamsTailList) : { ) }
