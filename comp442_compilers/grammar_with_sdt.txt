prog					-> #createGlobalTable# classDeclList progBody #endGlobalTable#
classDecl				-> class id #storeId# #createClassEntryAndTable# { varFuncDefList } ; #endClassEntryAndTable#
classDeclList			-> classDecl classDeclList 
classDeclList			-> EPSILON 
progBody				-> program #storeId# #createProgramTable# funcBody ; #endProgramTable# funcDefList 

funcDef					-> type #storeType# id #storeId# funcDefRest
funcDefRest				-> #startFuncDef# ( fParams ) #createFuncEntryAndTable# funcBody ; #endFuncEntryAndTable#
funcDefList				-> funcDef funcDefList 
funcDefList				-> EPSILON 
funcBody				-> { varStatementList #checkIfReturns# } 

varDecl					-> type #storeType# id #storeId# varDeclRest
varDeclNoId				-> typeNoId #storeType# id #storeId# varDeclRest
varDeclRest				-> arraySizeList ; #createVariableEntry#

varFuncDefList			-> type #checkCircular# #storeType# id #storeId# varFuncDefListRest varFuncDefList
varFuncDefList			-> EPSILON
varFuncDefListRest		-> varDeclRest
varFuncDefListRest		-> funcDefRest

varStatementList		-> id varStatementListRest varStatementList
varStatementList		-> varDeclNoId varStatementList
varStatementList		-> noIdStartStatement varStatementList
varStatementList		-> EPSILON
varStatementListRest	-> #checkTypeGlobal# #storeType# id #storeId# varDeclRest 
varStatementListRest	-> #pushStatement# #assignmentStatementStart# #pushVar# #addToVar# assignStatRest ; #assignmentStatementEnd# #popStatement#

statement				-> noIdStartStatement
statement				-> #pushStatement# assignStat ; #popStatement#
statementList			-> statement statementList 
statementList			-> EPSILON 
noIdStartStatement      -> #pushStatement# #forStatementStart# for ( #forInitStatementStart# type #storeType# id #storeId# #createVariableEntry# #forAddVar# assignOp expr #forInitStatementEnd# ; #forRelExpr# #pushExpr# relExpr #popExpr# ; #forIncrementStatementStart# #pushStatement# assignStat #popStatement# #forIncrementStatementEnd# ) statBlock ; #forStatementEnd# #popStatement#
noIdStartStatement      -> #pushStatement# #ifelseStatementStart# if ( expr ) then statBlock #setInElseBlock# elseBlock ; #ifelseStatementEnd# #popStatement#
noIdStartStatement      -> #pushStatement# #getStatementStart# get ( #pushVar# variable #popVar# ) ; #getStatementEnd# #popStatement#
noIdStartStatement      -> #pushStatement# #putStatementStart# put ( expr ) ; #putStatementEnd# #popStatement#
noIdStartStatement      -> #pushStatement# #returnStatementStart# return ( expr ) ; #returnStatementEnd# #popStatement#
elseBlock				-> else statBlock
elseBlock				-> EPSILON
assignStat				-> #assignmentStatementStart# #pushVar# id #addToVar# assignStatRest #assignmentStatementEnd#
assignStat				-> assignStatRest
assignStatRest			-> indiceList assignStatRestRest
assignStatRestRest		-> . variable #popVar# assignOp expr
assignStatRestRest		-> #popVar# assignOp expr
statBlock				-> { statementList } 
statBlock				-> statement 
statBlock				-> EPSILON 

expr					-> #pushExpr# arithExpr exprRest #popExpr#
exprRest 				-> relOp #operatorExprFragment# arithExpr 
exprRest 				-> EPSILON
relExpr					-> arithExpr relOp #operatorExprFragment# arithExpr


sign					-> + #addSignExprFragment#
sign					-> - #addSignExprFragment#

arithExpr				-> term arithExprRest
arithExprRest 			-> addOp #operatorExprFragment# term arithExprRest
arithExprRest 			-> EPSILON
term					-> factor termRest
termRest 				-> multOp #operatorExprFragment# factor termRest
termRest				-> EPSILON
factor					->  ( #addLeftParen# arithExpr ) #addRightParen# 
factor					-> num #addNumericExprFragment#
factor					-> not factor 
factor					-> sign factor 
factor					-> #pushVar# id #addToVar# factorRest #popVar#
factorRest				-> dotidnest factorRest 
factorRest				-> #startFuncCall# ( aParams )
factorRest				-> indice factorRestRest 
factorRest				-> EPSILON 
factorRestRest			-> indice factorRestRest 
factorRestRest			-> dotidnest factorRest
factorRestRest			-> EPSILON

arithExprAEInt			-> termAEInt arithExprAEIntRest
arithExprAEIntRest		-> addOp #operatorExprFragment# termAEInt arithExprAEIntRest
arithExprAEIntRest		-> EPSILON
termAEInt				-> factorAEInt termAEIntRest
termAEIntRest			-> multOp #operatorExprFragment# factorAEInt termAEIntRest
termAEIntRest			-> EPSILON
factorAEInt				-> ( arithExprAEInt )
factorAEInt				-> integer #addNumericExprFragment#
factorAEInt				-> not factorAEInt
factorAEInt				-> sign factorAEInt
factorAEInt				-> #pushVar# id #addToVar# factorRest #popVar#

variable				-> id #addToVar# dotidIndiceList 
dotidnest				-> . id #addToVar#
dotidIndice				-> dotidnest
dotidIndice				-> indice
dotidIndiceList			-> dotidIndice dotidIndiceList
dotidIndiceList			-> EPSILON 
indice					-> [ #pushExpr# arithExprAEInt #popExpr# ] 
indiceList				-> indice indiceList 
indiceList				-> EPSILON 
arraySize				-> [ integer #storeArraySize# ] 
arraySizeList			-> arraySize arraySizeList 
arraySizeList			-> EPSILON 

typeNoId				-> float
typeNoId				-> int
type					-> typeNoId 
type					-> id #checkTypeGlobal#

fParams					-> #addFuncDefParameter# type #storeType# id #storeId# arraySizeList fParamsTailList 
fParams					-> EPSILON 
fParamsTail				-> , #addFuncDefParameter# type #storeType# id #storeId# arraySizeList 
fParamsTailList			-> fParamsTail fParamsTailList 
fParamsTailList			-> EPSILON 

aParams					-> expr aParamsTailList 
aParams					-> EPSILON 
aParamsTail				-> , expr 
aParamsTailList			-> aParamsTail aParamsTailList 
aParamsTailList			-> EPSILON 

assignOp          		-> =
relOp           		-> == 
relOp             		-> <>
relOp             		-> <
relOp           		-> >
relOp           		-> <=
relOp           		-> >=
addOp					-> + 
addOp					-> - 
addOp					-> or 
multOp					-> * 
multOp					-> / 
multOp					-> and 